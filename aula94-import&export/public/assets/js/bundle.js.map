{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,IAAI,GAAG,WAAW;AACxB,IAAMC,SAAS,GAAG,UAAU;AAC5B,IAAMC,KAAK,GAAG,EAAE;AAEhB,SAASC,IAAIA,CAACC,CAAC,EAAEC,CAAC,EAAC;EACf,OAAOD,CAAC,GAAGC,CAAC;AAChB;AAE6C;;AAGtC,SAASE,YAAYA,CAAA,EAAE;EAC1BC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;AACtE;AAEe,SAASC,OAAOA,CAACN,CAAC,EAAEC,CAAC,EAAC;EACjC,OAAOD,CAAC,GAACC,CAAC;EACV;AACJ;;AAEO,IAAMM,MAAM,gBAAAC,YAAA,CACf,SAAAD,OAAYX,IAAI,EAAEC,SAAS,EAAC;EAAAY,eAAA,OAAAF,MAAA;EACxB,IAAI,CAACX,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACc,SAAS,GAAGb,SAAS;AAC9B,CAAC;;;;;;UCxBL;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;;AAEA;;AAEsE;;AAEtE,IAAMD,IAAI,GAAG,MAAM,CAAC;;AAEpBQ,OAAO,CAACC,GAAG,CAACT,IAAI,EAACe,0CAAK,EAAEd,+CAAS,EAAEK,yCAAG,CAAC;AACvCE,OAAO,CAACC,GAAG,CAACN,8CAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACxB,IAAMa,EAAE,GAAG,IAAIL,4CAAM,CAAC,KAAK,EAAE,OAAO,CAAC;AACrCH,OAAO,CAACC,GAAG,CAACO,EAAE,CAAC;;AAEf,yS","sources":["webpack://aula93/./src/modulo1.js","webpack://aula93/webpack/bootstrap","webpack://aula93/webpack/runtime/define property getters","webpack://aula93/webpack/runtime/hasOwnProperty shorthand","webpack://aula93/webpack/runtime/make namespace object","webpack://aula93/./src/index.js"],"sourcesContent":["const nome = 'Guilherme';\r\nconst sobrenome = 'Henrique';\r\nconst idade = 21;\r\n\r\nfunction soma(x, y){\r\n    return x + y;\r\n}\r\n\r\nexport {nome, sobrenome, idade as age, soma};//aqui estamos exportando a constante nome. Note que usei o AS para expotar a variável idade passando um 'apelido' age\r\n\r\n\r\nexport function calculaIdade(){\r\n    console.log('função sendo exportada direto, em tempo de criação.')\r\n}\r\n\r\nexport default function subtrai(x, y){\r\n    return x-y;\r\n    //aqui usamos o default para dizer que essa função é o default desse modulo, ou seja, o padrao. A sintaxe é diferente quando vamos importar esse tipo de valor. Sempre que importarmos sem as {} pegará o valor default.\r\n}\r\n\r\nexport class Pessoa{\r\n    constructor(nome, sobrenome){\r\n        this.nome = nome;\r\n        this.sonrenome = sobrenome;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//Módulos: são os arquivos, sendo que cada arquivo .js, por exemplo, tem seu próprio 'mundo', sendo assim não podemos acessar valores de um arquivo em outro.\r\n\r\n//Import e Export: com import e export resolvemos isso. Como o nome já diz, podemos importar e exportar coisas entre arquivos em um módulo\r\n\r\nimport {nome as nome2, sobrenome, age, soma, Pessoa} from \"./modulo1\";//aqui estamos importando as constantes nome,sobrenome, idade, além da função soma de um outro arquivo\r\n\r\nconst nome = 'joao';//aqui daria um erro, pois a variável nome já havia sido declarada, porém, usando o AS podemos importar a variável já alterando seu nome\r\n\r\nconsole.log(nome,nome2, sobrenome, age);\r\nconsole.log(soma(5, 10));\r\nconst p1 = new Pessoa('gui', 'henri');\r\nconsole.log(p1);\r\n\r\n//podemos também importar um módulo inteiro, basta usar o import * from e o nome do módulo... assim todas as variaveis, funçoes, classes etc, que estiverem com o EXPORT serão exportadas. Isto é, podemos definir valores como privados dentro de um módulo, bastando não usar o 'export' em sua sintax.\r\n\r\n\r\n"],"names":["nome","sobrenome","idade","soma","x","y","age","calculaIdade","console","log","subtrai","Pessoa","_createClass","_classCallCheck","sonrenome","nome2","p1"],"sourceRoot":""}